name: Hotfix Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (DEV, QA, UAT, PROD)'
        required: true
        type: choice
        options:
          - DEV
          - QA
          - UAT
          - PROD
        default: 'DEV'
      branch:
        description: 'Branch to deploy (usually hotfix/*)'
        required: true
        default: 'main'

jobs:
  build_test_and_push:
    name: Build, Test, and Deploy Hotfix
    runs-on: ubuntu-latest
    permissions: write-all
    environment: ${{ github.event.inputs.environment }}
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      # Install dependencies
      - name: Install dependencies
        run: dotnet restore

      # Build the application
      - name: Build
        run: dotnet build --no-restore --configuration Release

      # Run unit tests
      - name: Run Unit Tests
        run: dotnet test --no-build --verbosity normal

      # Generate Semantic Version
      - name: Generate semantic version
        id: semver
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          version_format: "${major}.${minor}.${patch}-hotfix"
          major_pattern: "(feat!)"
          minor_pattern: "(feat|fix|chore|docs|ci|perf|refactor|style|test)"
          major_regexp_flags: ""
          minor_regexp_flags: ""

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.semver.outputs.version_tag  }}
          release_name: hotfix-${{ steps.semver.outputs.version_tag  }}
          draft: false
          prerelease: true
        continue-on-error: true

      # Configure AWS Credentials based on environment
      - name: Configure AWS DEV Credentials
        if: github.event.inputs.environment == 'DEV'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ARN_DEV }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Configure AWS QA Credentials
        if: github.event.inputs.environment == 'QA'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ARN_QA }}
          aws-region: us-east-1

      - name: Configure AWS UAT Credentials
        if: github.event.inputs.environment == 'UAT'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ARN_UAT }}
          aws-region: us-east-1

      - name: Configure AWS PROD Credentials
        if: github.event.inputs.environment == 'PROD'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ARN_PROD }}
          aws-region: us-east-1

      # Set ECR URI based on environment
      - name: Set ECR URI
        id: ecr-uri
        run: |
          if [ "${{ github.event.inputs.environment }}" == "DEV" ]; then
            echo "uri=${{ secrets.ECR_URI_DEV }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.environment }}" == "QA" ]; then
            echo "uri=${{ secrets.ECR_URI_QA }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.environment }}" == "UAT" ]; then
            echo "uri=${{ secrets.ECR_URI_UAT }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.environment }}" == "PROD" ]; then
            echo "uri=${{ secrets.ECR_URI_PROD }}" >> $GITHUB_OUTPUT
          fi

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ steps.ecr-uri.outputs.uri }}

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ steps.ecr-uri.outputs.uri }}:${{ steps.semver.outputs.version_tag  }} .
          docker build -t ${{ steps.ecr-uri.outputs.uri }}:hotfix-latest .

      # Push Docker Image to ECR
      - name: Push Docker Image to ECR
        run: |
          docker push ${{ steps.ecr-uri.outputs.uri }}:${{ steps.semver.outputs.version_tag  }}
          docker push ${{ steps.ecr-uri.outputs.uri }}:hotfix-latest

      # Update ECS Task Definition
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --region ${{ secrets.AWS_DEFAULT_REGION }} --task-definition nci-oars-${{ github.event.inputs.environment == 'DEV' && 'dev' || github.event.inputs.environment == 'QA' && 'qa' || github.event.inputs.environment == 'UAT' && 'uat' || 'prod' }}-taskdefinition --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: web
          image: ${{ steps.ecr-uri.outputs.uri }}:hotfix-latest

      # Deploy to ECS
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: nci-oars-${{ github.event.inputs.environment == 'DEV' && 'dev' || github.event.inputs.environment == 'QA' && 'qa' || github.event.inputs.environment == 'UAT' && 'uat' || 'prod' }}-service
          cluster: nci-oars-${{ github.event.inputs.environment == 'DEV' && 'dev' || github.event.inputs.environment == 'QA' && 'qa' || github.event.inputs.environment == 'UAT' && 'uat' || 'prod' }}-cluster
          wait-for-service-stability: true
