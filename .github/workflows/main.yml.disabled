name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      custom_version:
        description: 'Enter the custom semantic version'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install dependencies
        run: |
          sudo apt-get install -y jq
          echo "Dependencies installed"

  release:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Semantic Release
        run: echo '{"branches":[],"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator","@semantic-release/github"]}' > .releaserc.json
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        with:
          branches: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_push:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_SANDBOX }}
          aws-region: us-east-1
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}
      - name: Get image tag version
        id: get_image_tag
        uses: actions/github-script@v6
        with:
          script: |
            const customVersion = '${{ github.event.inputs.custom_version }}';
            if (customVersion) {
              core.setOutput('image_tag', customVersion);
            } else {
              try {
                const latestRelease = await github.rest.repos.getLatestRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                });
                core.setOutput('image_tag', latestRelease.tag_name);
              } catch (error) {
                core.warning('No releases found. Using default version v1.0.0.sprint.1');
                core.setOutput('image_tag', 'v1.0.0.sprint.1');
              }
            }
      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t web-reporting:latest .
      - name: Tag Docker Image
        run: |
          IMAGE_TAG=${{ steps.get_image_tag.outputs.image_tag }}
          echo "Tagging Docker image with version: $IMAGE_TAG"
          docker tag web-reporting:latest ${{ secrets.ECR_URI }}:latest
          docker tag web-reporting:latest ${{ secrets.ECR_URI }}:$IMAGE_TAG
      - name: Push Docker Image to ECR
        run: |
          IMAGE_TAG=${{ steps.get_image_tag.outputs.image_tag }}
          echo "Pushing Docker image to ECR with tag: $IMAGE_TAG"
          docker push ${{ secrets.ECR_URI }}:latest
          docker push ${{ secrets.ECR_URI }}:$IMAGE_TAG
      - name: Write image definitions
        run: |
          IMAGE_TAG=${{ steps.get_image_tag.outputs.image_tag }}
          echo "Writing image definitions..."
          printf '[{"name":"web","imageUri":"%s"}]' ${{ secrets.ECR_URI }}:$IMAGE_TAG > imagedefinitions.json
      - name: Upload imagedefinitions.json
        uses: actions/upload-artifact@v3
        with:
          name: imagedefinitions
          path: imagedefinitions.json